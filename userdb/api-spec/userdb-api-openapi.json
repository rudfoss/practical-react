{"openapi":"3.0.0","paths":{"/health":{"get":{"description":"Provides some health information about the API.","operationId":"AppController_getHealth","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HealthResponse"}}}}},"summary":"Get health information about the API","tags":["App"]}},"/stats":{"get":{"operationId":"AppController_getStats","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/StatsResponse"}}}}},"summary":"Returns some basic stats from the API","tags":["App"]}},"/auth/login":{"post":{"operationId":"AuthController_login","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginRequest"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSession"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}}},"summary":"Log a user in and get an active session","tags":["Auth"]}},"/auth/logout":{"get":{"operationId":"AuthController_logout","parameters":[],"responses":{"200":{"description":""},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Log out the current user","tags":["Auth"]}},"/auth/sessions":{"get":{"description":"Return a list of all active session including their tokens (for debugging). Requires admin role.\n\nUser must have one of these roles: **Admin**","operationId":"AuthController_getActiveSessions","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/UserSession"}}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Get all currently active sessions","tags":["Auth"]}},"/auth/log-everyone-out":{"get":{"description":"\n\nUser must have one of these roles: **Admin**","operationId":"AuthController_logEveryoneOut","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/LogEveryoneOutResponse"}}}}},"security":[{"session-token":[]}],"summary":"Log out every currently logged in user except the user requesting it.","tags":["Auth"]}},"/auth/session":{"get":{"description":"Returns full session information for the current user if the session is not expired. Can also be used to refresh the session, though doing so will create a new session token and cause the old token to expire.","operationId":"AuthUserController_getSession","parameters":[{"name":"refresh","required":false,"in":"query","description":"If 'true' the old session token will be removed and a new session object with a new token is returned. The createdAt timestamp of the old session is kept.","schema":{"enum":["true","false"],"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserSession"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Get the current users active session","tags":["Authenticated User"]}},"/auth/user":{"get":{"operationId":"AuthUserController_getCurrentUser","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserInformation"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Get user information about the currently logged in user","tags":["Authenticated User"]}},"/users":{"get":{"description":"\n\nUser must have one of these roles: **User, UserAdmin**","operationId":"UsersController_getUsers","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Get all users","tags":["Users"]},"post":{"description":"\n\nUser must have one of these roles: **UserAdmin**","operationId":"UsersController_createUser","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewUser"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Create a new user","tags":["Users"]}},"/users/{userId}":{"get":{"description":"\n\nUser must have one of these roles: **User, UserAdmin**","operationId":"UsersController_getUser","parameters":[{"name":"userId","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}},"404":{"description":"No user found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpNotFoundException"}}}}},"security":[{"session-token":[]}],"summary":"Get information about a specific user","tags":["Users"]},"patch":{"description":"Updates an existing user. Users and guests can only update themselves and cannot change their group memberships.","operationId":"UsersController_updateUser","parameters":[{"name":"userId","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatchUser"}}}},"responses":{"200":{"description":"The updated user.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}},"404":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpNotFoundException"}}}}},"security":[{"session-token":[]}],"summary":"Update an existing user","tags":["Users"]},"delete":{"description":"\n\nUser must have one of these roles: **UserAdmin**","operationId":"UsersController_deleteUser","parameters":[{"name":"userId","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"The removed user.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}},"404":{"description":"The user does not exist","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpNotFoundException"}}}},"409":{"description":"The user is protected and cannot be deleted (see error for details)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpConflictException"}}}}},"security":[{"session-token":[]}],"summary":"Delete the specified user","tags":["Users"]}},"/groups":{"get":{"description":"\n\nUser must have one of these roles: **UserAdmin, User**","operationId":"GroupsController_getGroups","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Group"}}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"List all groups","tags":["Groups"]},"post":{"description":"\n\nUser must have one of these roles: **UserAdmin**","operationId":"GroupsController_createGroup","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewGroup"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Group"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}}},"security":[{"session-token":[]}],"summary":"Create a new group","tags":["Groups"]}},"/groups/{groupId}":{"get":{"description":"Guests are only allowed to get information about groups they are a member of.","operationId":"GroupsController_getGroup","parameters":[{"name":"groupId","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Group"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}},"404":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpNotFoundException"}}}}},"security":[{"session-token":[]}],"summary":"Get information about a specific group.","tags":["Groups"]},"patch":{"description":"\n\nUser must have one of these roles: **UserAdmin**","operationId":"GroupsController_updateGroup","parameters":[{"name":"groupId","required":true,"in":"path","schema":{"type":"string"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/PatchGroup"}}}},"responses":{"200":{"description":"The updated group.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Group"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}},"404":{"description":"Group not found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpNotFoundException"}}}}},"security":[{"session-token":[]}],"summary":"Update properties of an existing group","tags":["Groups"]},"delete":{"description":"\n\nUser must have one of these roles: **UserAdmin**","operationId":"GroupsController_deleteGroup","parameters":[{"name":"groupId","required":true,"in":"path","schema":{"type":"string"}}],"responses":{"200":{"description":"The deleted group.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Group"}}}},"400":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpBadRequestException"}}}},"401":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpUnauthorizedException"}}}},"403":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpForbiddenException"}}}},"404":{"description":"No user found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpNotFoundException"}}}},"409":{"description":"The group is protected and cannot be deleted (see error for details)","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HttpConflictException"}}}}},"security":[{"session-token":[]}],"summary":"Delete a group","tags":["Groups"]}}},"info":{"title":"User DB API","description":"A simple API simulating a very basic user administration service\n\n## Authentication\n\nIn order to call protected endpoints you need a valid session token. These tokens are issued by the `auth/login` endpoint. Provide a valid username and password combination to it and it will return a valid session with a token. This token must then be passed in the `Authorization` header.\n\n```\nAuthorization: Bearer [token]\n```\n\nIn the Swagger UI you can perform authenticated requests by using the `login` endpoint to get a token and then copying that token to the Authorize dialog.\n\n**Important**: Tokens expire after 30 minutes, but you can use the `auth/session` endpoint to get a new session token with another 30 minute expiration window as long as the current session is still active.\n\nThe service starts with an admin and a guest user with username and password `admin`/`admin` and `guest`/`guest` respectively.\n\n## Authorization\n\nEach user can be assigned a role. The \"admin\" role grants access to all endpoints regardless of the role required. These roles are available:\n\n- Admin: This role grants access to all endpoints and actions. Since the admin role has full access it is not listed as a possible role for protected endpoints unless it is the only role required.\n- UserAdmin: Allows managing users and group memberships for non-admin users, but cannot create or change groups themselves.\n- User: A single user can view themselves, all users and all groups in the system, but cannot change anything except their own information.\n- Guest: A single user can view themselves and their own memberships and direct groups, but cannot see other users or their memeberships.\n","version":"1.0","contact":{"name":"Practical React with Typescript","url":"https://github.com/rudfoss/practical-react-with-typescript","email":"thomas.rudfoss@bouvet.no"}},"tags":[],"servers":[],"components":{"securitySchemes":{"session-token":{"scheme":"bearer","bearerFormat":"JWT","type":"http","description":"Use /auth/login to create a session token then paste it here to authorize requests."}},"schemas":{"HealthResponse":{"type":"object","properties":{"ok":{"type":"boolean"},"bootTime":{"type":"string","description":"RFC3339 timestamp for when the server first booted"},"upTime":{"type":"string","maxLength":64,"minLength":14,"pattern":"P\\d+Y\\d+M\\d+DY\\d+H\\d+M\\d+S","example":"P0Y0M0DT0H0M12S"},"dbFilePath":{"type":"string"}},"required":["ok","bootTime","upTime","dbFilePath"]},"StatsResponse":{"type":"object","properties":{"userCount":{"type":"number","minimum":0},"groupCount":{"type":"number","minimum":0},"sessionCount":{"type":"number","minimum":0},"adminCount":{"type":"number","minimum":0},"guestCount":{"type":"number","minimum":0}},"required":["userCount","groupCount","sessionCount","adminCount","guestCount"]},"LoginRequest":{"type":"object","properties":{"username":{"type":"string","minLength":1,"maxLength":128,"example":"guest"},"password":{"type":"string","minLength":1,"maxLength":128,"example":"guest"}},"required":["username","password"]},"UserSession":{"type":"object","properties":{"token":{"type":"string"},"userId":{"type":"string","minLength":21,"maxLength":128},"createdAt":{"type":"number","description":"The timestamp when the session was created (in milliseconds)"},"expiresAt":{"type":"number","description":"The timestamp when the session will expire (in milliseconds)"}},"required":["token","userId","createdAt","expiresAt"]},"HttpBadRequestException":{"type":"object","properties":{"message":{"type":"string"},"error":{"type":"string"},"statusCode":{"type":"number","enum":[400]}},"required":["message","error","statusCode"]},"HttpUnauthorizedException":{"type":"object","properties":{"message":{"type":"string"},"error":{"type":"string"},"statusCode":{"type":"number","enum":[401]}},"required":["message","error","statusCode"]},"HttpForbiddenException":{"type":"object","properties":{"message":{"type":"string"},"error":{"type":"string"},"statusCode":{"type":"number","enum":[403]}},"required":["message","error","statusCode"]},"LogEveryoneOutResponse":{"type":"object","properties":{"removedSessions":{"description":"Each session that was logged out","type":"array","items":{"$ref":"#/components/schemas/UserSession"}}},"required":["removedSessions"]},"User":{"type":"object","properties":{"id":{"type":"string","minLength":21,"maxLength":128},"username":{"type":"string","minLength":1,"maxLength":128},"displayName":{"type":"string","minLength":1,"maxLength":256},"pictureUrl":{"type":"string","description":"Optionally specify a url for a picture of this user. Pictures are not hosted on this API"},"groupIds":{"description":"A list of all group ids in which this user is a member.","type":"array","items":{"type":"string","minLength":1}}},"required":["id","username","groupIds"]},"Group":{"type":"object","properties":{"id":{"type":"string","minLength":21,"maxLength":128},"displayName":{"type":"string","minLength":1,"maxLength":256},"description":{"type":"string","maxLength":8196},"isSystemDefined":{"type":"boolean","description":"System-defined groups cannot be removed."},"roles":{"type":"array","description":"The roles assigned to users in this group.","minLength":1,"items":{"type":"string","enum":["Admin","UserAdmin","User","Guest"]}}},"required":["id","displayName","roles"]},"UserInformation":{"type":"object","properties":{"user":{"$ref":"#/components/schemas/User"},"roles":{"type":"array","minLength":1,"items":{"type":"string","enum":["Admin","UserAdmin","User","Guest"]}},"groups":{"type":"array","items":{"$ref":"#/components/schemas/Group","minLength":1}}},"required":["user","roles","groups"]},"HttpNotFoundException":{"type":"object","properties":{"message":{"type":"string"},"error":{"type":"string"},"statusCode":{"type":"number","enum":[404]}},"required":["message","error","statusCode"]},"PatchUser":{"type":"object","properties":{"username":{"type":"string","minLength":1,"maxLength":128},"displayName":{"type":"string","minLength":1,"maxLength":256},"pictureUrl":{"type":"string","description":"Optionally specify a url for a picture of this user. Pictures are not hosted on this API"},"password":{"type":"string","minLength":4,"maxLength":128},"groupIds":{"description":"A list of all group ids which this user should be a member of. If not provided the user will become a member of the guest group.","type":"array","items":{"type":"string","minLength":1}}}},"HttpConflictException":{"type":"object","properties":{"message":{"type":"string"},"error":{"type":"string"},"statusCode":{"type":"number","enum":[409]}},"required":["message","error","statusCode"]},"NewUser":{"type":"object","properties":{"username":{"type":"string","minLength":1,"maxLength":128},"displayName":{"type":"string","minLength":1,"maxLength":256},"pictureUrl":{"type":"string","description":"Optionally specify a url for a picture of this user. Pictures are not hosted on this API"},"password":{"type":"string","minLength":4,"maxLength":128},"groupIds":{"description":"A list of all group ids which this user should be a member of. If not provided the user will become a member of the guest group.","type":"array","items":{"type":"string","minLength":1}}},"required":["username","password"]},"PatchGroup":{"type":"object","properties":{"displayName":{"type":"string","minLength":1,"maxLength":256},"description":{"type":"string","maxLength":8196},"isSystemDefined":{"type":"boolean","description":"System-defined groups cannot be removed."},"UserDatabaseRole":{"type":"array","description":"The roles assigned to users in this group. If not specified the Guest role will be added.","minLength":1,"items":{"type":"string","enum":["Admin","UserAdmin","User","Guest"]}}}},"NewGroup":{"type":"object","properties":{"displayName":{"type":"string","minLength":1,"maxLength":256},"description":{"type":"string","maxLength":8196},"isSystemDefined":{"type":"boolean","description":"System-defined groups cannot be removed."},"UserDatabaseRole":{"type":"array","description":"The roles assigned to users in this group. If not specified the Guest role will be added.","minLength":1,"items":{"type":"string","enum":["Admin","UserAdmin","User","Guest"]}}},"required":["displayName"]}}},"externalDocs":{"description":"OpenAPI document","url":"./docs-json"}}