{
	"React Component": {
		"prefix": "react-component",
		"body": [
			"export interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Props {",
			"\t${0}",
			"}",
			"",
			"export const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = (props: ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Props) => {",
			"\treturn ()",
			"}"
		],
		"description": "Log output to console"
	},
	"React Service": {
		"prefix": "react-service",
		"body": [
			"import { createContext, useContext, useMemo } from \"react\"",
			"",
			"export interface ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}ContextProps {",
			"\t${0}",
			"}",
			"",
			"const ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Context = createContext<${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}ContextProps | undefined>(undefined)",
			"${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Context.displayName = \"${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Context\"",
			"",
			"export const use${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = () => {",
			"\tconst ctx = useContext(${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Context)",
			"\tif (!ctx) throw new Error(\"${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} must be provided before use\")",
			"\treturn ctx",
			"}",
			"",
			"export interface Provide${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Props {",
			"\tchildren: React.ReactNode",
			"}",
			"",
			"export const Provide${TM_FILENAME_BASE/(.*)/${1:/capitalize}/} = ({children}: Provide${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Props) => {",
			"\tconst value = useMemo((): ${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}ContextProps => {",
			"\t\treturn {}",
			"\t}, [])",
			"\treturn <${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Context.Provider value={value}>{children}</${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}Context.Provider>",
			"}"
		]
	}
}
